{"version":3,"sources":["action/actionTypes.js","action/actionCreators.js","components/SearchBar/SearchBar.js","components/Widget/Widget.js","components/Loader/Loader.js","components/Weather/Weather.js","App.js","reportWebVitals.js","store/reducer.js","store/index.js","index.js"],"names":["FETCH_WEATHER","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","fetchWeather","lat","long","placeName","dispatch","loadWeather","axios","get","then","res","fetchWeatherSuccess","data","catch","error","fetchWeatherFailure","type","SearchBar","useState","setLat","setLong","setPlacename","useDispatch","useEffect","onChange","document","getElementsByClassName","value","style","display","publicKey","inputClass","onSuggestionSelect","result","lt","lng","text","resetSearch","Widget","props","weather","temp","dt","feels_like","humidity","wind_speed","pressure","sunrise","sunset","index","useSelector","state","className","moment","Date","format","src","icon","alt","description","day","night","min","max","Loader","Weather","weatherDataDaily","setWeatherDataDaily","weatherDataHourly","setWeatherDataHourly","hourlyTemp","setHourlyTemp","hourlyTempLabels","setHourlyTempLabels","weatherData","isLoading","getCurrentWeatherInfo","length","prevState","tempWeather","map","push","tempWeatherLabels","daily","slice","hourly","window","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","item","height","labels","datasets","label","fill","backgroundColor","borderColor","options","tooltips","mode","callbacks","tooltipItem","datasetIndex","scales","yAxes","scaleLabel","labelString","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cc97cd10.chunk.js","sourcesContent":["export const FETCH_WEATHER = \"FETCH_WEATHER\"\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\"\nexport const FETCH_WEATHER_FAILURE = \"FETCH_WEATHER_FAILURE\"","import axios from \"axios\"\nimport { FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE, FETCH_WEATHER} from \"./actionTypes\"\nconst API_KEY = \"06c47f02b50c65099fadafb6c6f61a67\"\n\nexport const fetchWeather = (lat, long, placeName) => {\n    return function(dispatch){\n        dispatch(loadWeather())\n        axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=current,minutely,alerts&units=metric&appid=${API_KEY}`)\n        .then(res => {\n            dispatch(fetchWeatherSuccess({data: res.data, placeName}))\n        })\n        .catch(error => {\n            dispatch(fetchWeatherFailure(error))\n        })\n    }\n}\n\nconst loadWeather = () => {\n    return {\n        type: FETCH_WEATHER\n    }\n}\n\nconst fetchWeatherSuccess = (data) => {\n    return {\n        type: FETCH_WEATHER_SUCCESS,\n        data: data.data,\n        placeName: data.placeName\n    }\n}\n\nconst fetchWeatherFailure = (error) => {\n    return {\n        type: FETCH_WEATHER_FAILURE,\n        error\n    }\n}","import React, {useState, useEffect } from 'react'\nimport MapboxAutocomplete from 'react-mapbox-autocomplete';\nimport { useDispatch } from 'react-redux'\nimport { fetchWeather } from \"../../action/actionCreators\"\nimport \"./SearchBar.css\"\nfunction SearchBar() {\n    const [lat, setLat] = useState()\n    const [long, setLong] = useState()\n    const [placeName, setPlacename ] = useState()\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(fetchWeather(lat, long, placeName))\n    },[lat, long])\n    const suggestionSelect = (result, lt, lng, text) => {\n        setLat(lt)\n        setLong(lng)\n        setPlacename(text)\n      }\n\n    const checkIfInputIsEmpty = () => {\n        if(document.getElementsByClassName(\"react-mapbox-ac-input\").value == \"\")\n            document.getElementsByClassName(\"react-mapbox-ac-menu\").style.display = \"none\"\n        return\n    }\n    \n    return (\n        <div onChange = {checkIfInputIsEmpty}>\n            <MapboxAutocomplete publicKey='pk.eyJ1IjoiZGViYTIwMTJkZHgiLCJhIjoiY2tsbDl1NWF2MTRzbzJxbm1ncWljYXNzOSJ9.F6wsFQDBFbbFITjO6ZfIQw'\n                    inputClass='form-control search'\n                    onSuggestionSelect={suggestionSelect}\n                    resetSearch={false}/>\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React from 'react'\nimport { useSelector } from \"react-redux\"\nimport moment from \"moment\"\nimport \"./Widget.css\"\nfunction Widget(props) {\n    const { temp, dt ,feels_like, humidity, wind_speed, pressure, sunrise, sunset ,weather } = props.weather\n    const { index } = props\n    const placeName = useSelector(state => state.placeName)\n\n    return (\n        <div className = \"widget-container\">\n            <div className = \"weather-header\">\n            <div>{index === 0 ? \"Tomorrow\" : \"Day after tomorrow\" } - {moment(new Date(dt * 1000)).format(\"DD MMM YYYY\")} ({placeName})</div>\n                <div><div><img src = {`http://openweathermap.org/img/wn/${weather[0].icon}.png`} alt = \"icon\"></img></div><span>{weather[0].description}</span></div>\n            </div>\n            \n            <div className = \"stats\">\n                <div className = \"temperature-holder\">\n                    <span className = \"temperature-holder-item\">Temperature(day): {temp.day} °c</span>\n                    <span className = \"temperature-holder-item\">Temperature(night): {temp.night} °c</span>\n                    <span className = \"temperature-holder-item\">Temperature(min): {temp.min} °c</span>\n                    <span className = \"temperature-holder-item\">Temperature(max): {temp.max} °c</span>\n                </div>\n\n                <div className = \"temperature-holder\">\n                    <span className = \"temperature-holder-item\">Feels Like(day): {feels_like.day} °c</span>\n                    <span className = \"temperature-holder-item\">Feels Like(night): {feels_like.night} °c</span>\n                </div>\n\n                <div className = \"temperature-holder\">\n                    <span className = \"temperature-holder-item\">Humidity: {humidity} %</span>\n                    <span className = \"temperature-holder-item\">Wind speed: {wind_speed} km/h</span>\n                    <span className = \"temperature-holder-item\">Pressure: {pressure}</span>\n                </div>\n\n                <div className = \"temperature-holder\">\n                    <span className = \"temperature-holder-item\">Sunrise: {moment(new Date(sunrise * 1000)).format(\"h:mm a\")}</span>\n                    <span className = \"temperature-holder-item\">Sunset: {moment(new Date(sunset * 1000)).format(\"h:mm a\")}</span>\n                </div>\n            </div>  \n        </div>\n    )\n}\n\nexport default Widget\n","import React from 'react'\nimport \"./Loader.css\"\n\nfunction Loader() {\n    return (\n        <div className = \"loader-container\">\n        </div>\n    )\n}\n\nexport default Loader\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Line } from \"react-chartjs-2\";\nimport moment from \"moment\";\nimport { fetchWeather } from \"../../action/actionCreators\";\nimport \"./Weather.css\";\nimport Widget from \"../Widget/Widget\";\nimport Loader from \"../Loader/Loader\";\n\nfunction Weather() {\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  const [weatherDataDaily, setWeatherDataDaily] = useState();\n  const [weatherDataHourly, setWeatherDataHourly] = useState();\n  const [hourlyTemp, setHourlyTemp] = useState([]);\n  const [hourlyTempLabels, setHourlyTempLabels] = useState([]);\n  const weatherData = useSelector((state) => state.data);\n  const isLoading = useSelector((state) => state.isLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getCurrentWeatherInfo();\n  }, [lat, long]);\n\n  useEffect(() => {\n    weatherDataHourly &&\n      weatherDataHourly.length &&\n      setHourlyTemp((prevState) => {\n        let tempWeather = [];\n        weatherDataHourly.map((weather) => {\n          tempWeather.push(weather.temp);\n          return tempWeather;\n        });\n        return [...tempWeather];\n      });\n    weatherDataHourly &&\n      weatherDataHourly.length &&\n      setHourlyTempLabels((prevState) => {\n        let tempWeatherLabels = [];\n        weatherDataHourly.map((weather) => {\n          tempWeatherLabels.push(\n            moment(new Date(weather.dt * 1000)).format(\"DD MMM YYYY h:mm a\")\n          );\n          return tempWeatherLabels;\n        });\n        return [...tempWeatherLabels];\n      });\n  }, [weatherDataDaily, weatherDataHourly]);\n\n  useEffect(() => {\n    weatherData.daily &&\n      weatherData.daily.length &&\n      setWeatherDataDaily(weatherData.daily.slice(1, 3));\n    weatherData.hourly &&\n      weatherData.hourly.length &&\n      setWeatherDataHourly(weatherData.hourly);\n  }, [weatherData]);\n\n  const getCurrentWeatherInfo = () => {\n    window.navigator.geolocation.getCurrentPosition((pos) => {\n      setLat(pos.coords.latitude);\n      setLong(pos.coords.longitude);\n    });\n    dispatch(fetchWeather(lat, long, \"Your Location\"));\n  };\n\n  let config = {\n    tooltips: {\n      mode: \"label\",\n      callbacks: {\n        label: function (tooltipItem, data) {\n          let label =\n            \"Temperature \" +\n            data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index] +\n            \" °c\";\n          return label;\n        },\n      },\n    },\n    scales: {\n      yAxes: [\n        {\n          scaleLabel: {\n            display: true,\n            labelString: \"Temperature(°c)\",\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <div>\n      {isLoading ? (\n        <div className=\"loader\">\n          <Loader />\n        </div>\n      ) : (\n        <>\n          <div className=\"widget\">\n            {weatherDataDaily &&\n              weatherDataDaily.length &&\n              weatherDataDaily.map((item, index) => (\n                <Widget index={index} key={index} weather={item} />\n              ))}\n          </div>\n          {weatherDataHourly && weatherDataHourly.length && (\n            <div className=\"chart-container\">\n              <Line\n                height={100}\n                data={{\n                  labels: hourlyTempLabels,\n                  datasets: [\n                    {\n                      label: \"Hourly temperature for next 48 hours(IST)\",\n                      data: hourlyTemp,\n                      fill: false,\n                      backgroundColor: \"rgba(75,192,192,0.2)\",\n                      borderColor: \"rgba(75,192,192,1)\",\n                    },\n                  ],\n                }}\n                options={config}\n              />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Weather;\n","import './App.css';\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport Weather from \"./components/Weather/Weather\";\n \nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar/>\n      <Weather/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FETCH_WEATHER_SUCCESS, FETCH_WEATHER_FAILURE, FETCH_WEATHER } from \"../action/actionTypes\"\n\nconst initialState = {\n    data: {},\n    isLoading: true,\n    error: null,\n    placeName: null\n}\n\nexport const weatherReducer = (state = initialState, action) => {\n    switch(action.type){\n        case FETCH_WEATHER:\n            return {\n                ...state,\n                isLoading: true\n            }\n\n        case FETCH_WEATHER_SUCCESS:\n            return {\n                ...state,\n                data: action.data,\n                placeName: action.placeName,\n                isLoading: false\n            }\n\n        case FETCH_WEATHER_FAILURE:\n            return {\n                ...state,\n                error: action.error,\n                isLoading: false\n            }\n            \n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport { weatherReducer } from \"./reducer\"\n\nexport const store = createStore(weatherReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\"\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}